package com.ebest.frame.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ebest.frame.baselib.table.Form;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORM".
*/
public class FormDao extends AbstractDao<Form, Long> {

    public static final String TABLENAME = "FORM";

    /**
     * Properties of entity Form.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property BrandCode = new Property(3, String.class, "brandCode", false, "BRAND_CODE");
        public final static Property ManufacturerCode = new Property(4, String.class, "manufacturerCode", false, "MANUFACTURER_CODE");
        public final static Property CategorieCode = new Property(5, String.class, "categorieCode", false, "CATEGORIE_CODE");
        public final static Property DomainId = new Property(6, int.class, "domainId", false, "DOMAIN_ID");
        public final static Property Valid = new Property(7, int.class, "valid", false, "VALID");
    }


    public FormDao(DaoConfig config) {
        super(config);
    }
    
    public FormDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"BRAND_CODE\" TEXT," + // 3: brandCode
                "\"MANUFACTURER_CODE\" TEXT," + // 4: manufacturerCode
                "\"CATEGORIE_CODE\" TEXT," + // 5: categorieCode
                "\"DOMAIN_ID\" INTEGER NOT NULL ," + // 6: domainId
                "\"VALID\" INTEGER NOT NULL );"); // 7: valid
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORM\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Form entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String brandCode = entity.getBrandCode();
        if (brandCode != null) {
            stmt.bindString(4, brandCode);
        }
 
        String manufacturerCode = entity.getManufacturerCode();
        if (manufacturerCode != null) {
            stmt.bindString(5, manufacturerCode);
        }
 
        String categorieCode = entity.getCategorieCode();
        if (categorieCode != null) {
            stmt.bindString(6, categorieCode);
        }
        stmt.bindLong(7, entity.getDomainId());
        stmt.bindLong(8, entity.getValid());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Form entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String brandCode = entity.getBrandCode();
        if (brandCode != null) {
            stmt.bindString(4, brandCode);
        }
 
        String manufacturerCode = entity.getManufacturerCode();
        if (manufacturerCode != null) {
            stmt.bindString(5, manufacturerCode);
        }
 
        String categorieCode = entity.getCategorieCode();
        if (categorieCode != null) {
            stmt.bindString(6, categorieCode);
        }
        stmt.bindLong(7, entity.getDomainId());
        stmt.bindLong(8, entity.getValid());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Form readEntity(Cursor cursor, int offset) {
        Form entity = new Form( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // brandCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // manufacturerCode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // categorieCode
            cursor.getInt(offset + 6), // domainId
            cursor.getInt(offset + 7) // valid
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Form entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBrandCode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setManufacturerCode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCategorieCode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setDomainId(cursor.getInt(offset + 6));
        entity.setValid(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Form entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Form entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Form entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
