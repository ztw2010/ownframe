package com.ebest.frame.baselib.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.ebest.frame.baselib.table.Measure;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MEASURE".
*/
public class MeasureDao extends AbstractDao<Measure, Long> {

    public static final String TABLENAME = "MEASURE";

    /**
     * Properties of entity Measure.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Code = new Property(1, String.class, "code", false, "CODE");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Valid = new Property(3, int.class, "valid", false, "VALID");
        public final static Property Type = new Property(4, int.class, "type", false, "TYPE");
        public final static Property AnswerType = new Property(5, int.class, "answerType", false, "ANSWER_TYPE");
        public final static Property Description = new Property(6, String.class, "description", false, "DESCRIPTION");
        public final static Property ShortName = new Property(7, String.class, "shortName", false, "SHORT_NAME");
        public final static Property PageType = new Property(8, String.class, "pageType", false, "PAGETYPE");
        public final static Property Required = new Property(9, String.class, "required", false, "REQUIRED");
        public final static Property ForcedPhoto = new Property(10, int.class, "forcedPhoto", false, "FORCED_PHOTO");
        public final static Property GridPhoto = new Property(11, int.class, "gridPhoto", false, "GRID_PHOTO");
    }


    public MeasureDao(DaoConfig config) {
        super(config);
    }
    
    public MeasureDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MEASURE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"CODE\" TEXT," + // 1: code
                "\"NAME\" TEXT," + // 2: name
                "\"VALID\" INTEGER NOT NULL ," + // 3: valid
                "\"TYPE\" INTEGER NOT NULL ," + // 4: type
                "\"ANSWER_TYPE\" INTEGER NOT NULL ," + // 5: answerType
                "\"DESCRIPTION\" TEXT," + // 6: description
                "\"SHORT_NAME\" TEXT," + // 7: shortName
                "\"PAGETYPE\" TEXT," + // 8: pageType
                "\"REQUIRED\" TEXT," + // 9: required
                "\"FORCED_PHOTO\" INTEGER NOT NULL ," + // 10: forcedPhoto
                "\"GRID_PHOTO\" INTEGER NOT NULL );"); // 11: gridPhoto
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MEASURE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Measure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getValid());
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getAnswerType());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(8, shortName);
        }
 
        String pageType = entity.getPageType();
        if (pageType != null) {
            stmt.bindString(9, pageType);
        }
 
        String required = entity.getRequired();
        if (required != null) {
            stmt.bindString(10, required);
        }
        stmt.bindLong(11, entity.getForcedPhoto());
        stmt.bindLong(12, entity.getGridPhoto());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Measure entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String code = entity.getCode();
        if (code != null) {
            stmt.bindString(2, code);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getValid());
        stmt.bindLong(5, entity.getType());
        stmt.bindLong(6, entity.getAnswerType());
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(7, description);
        }
 
        String shortName = entity.getShortName();
        if (shortName != null) {
            stmt.bindString(8, shortName);
        }
 
        String pageType = entity.getPageType();
        if (pageType != null) {
            stmt.bindString(9, pageType);
        }
 
        String required = entity.getRequired();
        if (required != null) {
            stmt.bindString(10, required);
        }
        stmt.bindLong(11, entity.getForcedPhoto());
        stmt.bindLong(12, entity.getGridPhoto());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Measure readEntity(Cursor cursor, int offset) {
        Measure entity = new Measure( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // code
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getInt(offset + 3), // valid
            cursor.getInt(offset + 4), // type
            cursor.getInt(offset + 5), // answerType
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // description
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // shortName
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pageType
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // required
            cursor.getInt(offset + 10), // forcedPhoto
            cursor.getInt(offset + 11) // gridPhoto
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Measure entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setValid(cursor.getInt(offset + 3));
        entity.setType(cursor.getInt(offset + 4));
        entity.setAnswerType(cursor.getInt(offset + 5));
        entity.setDescription(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShortName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPageType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRequired(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setForcedPhoto(cursor.getInt(offset + 10));
        entity.setGridPhoto(cursor.getInt(offset + 11));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Measure entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Measure entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Measure entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
